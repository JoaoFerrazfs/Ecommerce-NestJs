{{> admin-navbar }}

<div class="container mt-4">
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h1 class="mb-4">{{#if id}}Editar Página {{else}}Cadastrar Página{{/if}}</h1>
    <a href="/admin/contents" class="btn btn-info btn-sm">Lista de Conteúdos</a>
  </div>


  <form method="POST">
    <!-- Campo oculto para o ID da página (usado na edição) -->
    {{#if id}}
      <input type="hidden" name="contentId" value="{{content.id}}" />
    {{/if}}

    <!-- Seleção de Nome da Página -->
    <div class="mb-3">
      <label for="content-name" class="form-label">Nome da Página:</label>
      <input
        type="text"
        id="content-name"
        name="name"
        class="form-control"
        value="{{#if id}}{{content.name}}{{/if}}"
        placeholder="Digite o nome da página"
        required
      />
    </div>


    <!-- Seleção de Modulos -->
    <div class="mb-3">
      <label for="modules" class="form-label">Adicionar modulos:</label>
      <select id="modules" class="form-select">
        <option value="">Selecione um modulo</option>
      </select>
      <button type="button" class="btn btn-secondary mt-2" id="add-module">Adicionar modulo</button>
    </div>

    <!-- Lista de Modulos Selecionados -->
    <div class="mb-3">
      <label class="form-label">Modulos Selecionados (Arraste para ordenar):</label>
      <ul id="selected-modules" class="list-group">
        {{#if id}}
          {{#each content.modules}}
            <li
              class="list-group-item d-flex justify-content-between align-items-center"
              data-module-id="{{id}}"
            >
              <img src="{{image}}" alt="{{name}}" class="me-3" style="width: 50px; height: auto;" />
              <span>{{name}}</span>
              <button type="button" class="btn btn-danger btn-sm remove-modules">Remover</button>
            </li>
          {{/each}}
        {{/if}}
      </ul>
    </div>

    <!-- Campo Oculto para Submeter os modulos Selecionados -->
    <input type="hidden" name="modules" id="selected-modules-input" />

    <!-- Botão de Submissão -->
    <button type="submit" class="btn btn-primary">
      {{#if id}}Salvar Alterações{{else}}Criar Página{{/if}}
    </button>
  </form>

</div>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const form = document.querySelector('form');
    const modulesSelect = document.getElementById('modules');
    const addModuleButton = document.getElementById('add-module');
    const modulesList = document.getElementById('selected-modules');
    const modulesInput = document.getElementById('selected-modules-input');
    const nameInput = document.getElementById('content-name');
    const contentId = "{{id}}"; // Pegamos o ID do conteúdo, se houver

    // Função para buscar os dados do conteúdo quando estamos editando
    async function fetchContentById(id) {
      const response = await fetch(`${window.location.origin}/api/contents/${id}`);
      if (response.ok) {
        return await response.json();
      } else {
        console.error('Erro ao carregar conteúdo:', await response.text());
        alert('Erro ao carregar os dados do conteúdo!');
        return null;
      }
    }

    async function fetchModules() {
      const response = await fetch(`${window.location.origin}/api/modules`);
      const data = await response.json();
      return data.data;
    }

    async function fetchModuleById(id) {
      const response = await fetch(`${window.location.origin}/api/modules/${id}`);
      const data = await response.json();
      return data.data;
    }

    // Preenche o select com modulos disponíveis
    const modules = await fetchModules();
    modules.forEach((module) => {
      const option = document.createElement('option');
      option.value = module._id;
      option.textContent = module.name;
      modulesSelect.appendChild(option);
    });

    if (contentId) {
      const { data } = await fetchContentById(contentId);

      if (data) {
        nameInput.value = data.name;

        for (const module of data.modules) {
          if (module) {
            addModuleToList( await fetchModuleById(module));
          }
        }
      }
    }

    addModuleButton.addEventListener('click', () => {
      const selectedModuleId = modulesSelect.value;
      const selectedModule = modules.find((b) => b._id === selectedModuleId);

      if (!selectedModule) return alert('Selecione um modulo válido!');

      // Verifica se o modulo já foi adicionado
      const alreadyAdded = Array.from(modulesList.children).some(
        (li) => li.dataset.moduleId === selectedModuleId,
      );
      if (alreadyAdded) return alert('Este modulo já foi adicionado!');

      addModuleToList(selectedModule);
    });

    function addModuleToList(module) {

      const listModuleItem = document.createElement('li');
      listModuleItem.className = 'list-group-item d-flex justify-content-between align-items-center';
      listModuleItem.dataset.moduleId = module._id;
      listModuleItem.dataset.moduleName = module.name;
      listModuleItem.innerHTML = `
        <span>${module.name}</span>
        <button type="button" class="btn btn-danger btn-sm remove-modules">Remover</button>
      `;

      // Adiciona funcionalidade de remoção
      listModuleItem.querySelector('.remove-modules').addEventListener('click', () => {
        listModuleItem.remove();
        updateHiddenInputModule();
      });

      modulesList.appendChild(listModuleItem);
      updateHiddenInputModule();
    }

    function updateHiddenInputModule() {
      const moduleIds = Array.from(modulesList.children).map(
        (li) => li.dataset.moduleId,
      );
      modulesInput.value = JSON.stringify(moduleIds);
    }


    // Interceptar o envio do formulário
    form.addEventListener('submit', async (e) => {
      e.preventDefault(); // Impede o envio padrão do formulário

      const moduleIds = Array.from(modulesList.children).map(
        (li) => li.dataset.moduleId
      );

      const data = {
        name: nameInput.value,
        modules: moduleIds,
      };

      const endpoint = contentId
        ? `${window.location.origin}/api/contents/${contentId}`
        : `${window.location.origin}/api/contents/create`;

      try {
        const response = await fetch(endpoint, {
          method: contentId ? 'PATCH' : 'POST', // PATCH para editar, POST para criar
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        });

        if (response.ok) {
          alert('Página criada/atualizada com sucesso!');
        } else {
          const errorResult = await response.json();
          alert(`Erro: ${errorResult.message}`);
        }
      } catch (error) {
        alert('Erro ao enviar o formulário. Tente novamente.');
      }
    });
  });
</script>




{{> admin-footer }}
